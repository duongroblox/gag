getgenv().ConfigsKaitun = {
	Beta_Fix_Data_Sync = true,

	NoDeletePlayer = false,

	["Block Pet Gift"] = true,
-- ===============================
-- üõ°Ô∏è Anti-AFK Script (auto ch·∫°y lu√¥n)
-- ===============================

local Players = game:GetService('Players')
local VirtualUser = game:GetService('VirtualUser')
local player = Players.LocalPlayer

player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
    warn('‚úÖ Anti-AFK: gi·∫£ l·∫≠p click chu·ªôt, tr√°nh b·ªã kick')
end)

-- ===============================
-- üîß Services & Modules
-- ===============================
local RS = game:GetService('ReplicatedStorage')
local Players = game:GetService('Players')
local CollectionService = game:GetService('CollectionService')
local HttpService = game:GetService('HttpService')
local CoreGui = game:GetService('CoreGui')
local player = Players.LocalPlayer

local DataService = nil
pcall(function()
    DataService = require(RS.Modules.DataService)
end)

local ReplicatorClass = nil
pcall(function()
    ReplicatorClass = require(RS.Modules.ReplicationClass)
end)

local PetRegistry = nil
pcall(function()
    PetRegistry = require(RS.Data.PetRegistry)
end)

-- Replicators cho Pets
local ActivePetsService, ActivePetStates, PlayerPetData
if ReplicatorClass then
    ActivePetsService = ReplicatorClass.new('ActivePetsService_Replicator')
    pcall(function()
        ActivePetsService:YieldUntilData()
    end)
    local tbl = ActivePetsService and ActivePetsService:YieldUntilData().Table
        or {}
    ActivePetStates = tbl.ActivePetStates or {}
    PlayerPetData = tbl.PlayerPetData or {}
end

-- ===============================
-- üñºÔ∏è HUD UI Sucacheo
-- ===============================
local TimeHelper = nil
pcall(function()
    TimeHelper = require(RS.Modules.TimeHelper)
end)

local screenGui = Instance.new('ScreenGui')
screenGui.Name = 'SucacheoHubUI'
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
screenGui.DisplayOrder = 200 -- HUD lu√¥n n·ªïi tr√™n overlay
screenGui.Parent = CoreGui

local hubTitle = Instance.new('TextLabel')
hubTitle.Size = UDim2.new(1, 0, 0, 50)
hubTitle.Position = UDim2.new(0, 0, 0, 10)
hubTitle.BackgroundTransparency = 1
hubTitle.TextColor3 = Color3.fromRGB(255, 215, 0)
hubTitle.Font = Enum.Font.GothamBold
hubTitle.TextSize = 24
hubTitle.TextStrokeTransparency = 0.1
hubTitle.Text = 'üåü Sucacheo Hub üåü'
hubTitle.ZIndex = 9999
hubTitle.Parent = screenGui

local status = Instance.new('TextLabel')
status.Size = UDim2.new(0, 600, 0, 500)
status.AnchorPoint = Vector2.new(0.5, 0)
status.Position = UDim2.new(0.5, 0, 0.5, -200)
status.BackgroundTransparency = 1
status.TextColor3 = Color3.fromRGB(255, 215, 0)
status.Font = Enum.Font.GothamBold
status.TextSize = 24
status.TextStrokeTransparency = 0.2
status.TextXAlignment = Enum.TextXAlignment.Center
status.TextYAlignment = Enum.TextYAlignment.Top
status.TextWrapped = true
status.Text = 'üê£ Egg Farm Status\nLoading...'
status.ZIndex = 9999
status.Parent = screenGui

-- ===============================
-- üîë Extra Stats (pet, fruit, c√¢y)
-- ===============================
local function getMyFarm()
    for _, farm in ipairs(workspace:GetChildren()) do
        if farm.Name == 'Farm' then
            for _, subFarm in ipairs(farm:GetChildren()) do
                if
                    subFarm.Name == 'Farm'
                    and subFarm:FindFirstChild('Important')
                    and subFarm.Important:FindFirstChild('Data')
                    and subFarm.Important.Data:FindFirstChild('Owner')
                    and subFarm.Important.Data.Owner.Value == player.Name
                then
                    return subFarm
                end
            end
        end
    end
    return nil
end

local function countAllPlants(myFarm)
    if not myFarm then
        return 0
    end
    local folder = myFarm.Important:FindFirstChild('Plants_Physical')
    if not folder then
        return 0
    end
    return #folder:GetChildren()
end

local function getExtraStats()
    local equippedCount, backpackCount, fruitCount, plantCount = 0, 0, 0, 0
    if PlayerPetData and ActivePetStates then
        local pdata = PlayerPetData[player.Name]
        local active = ActivePetStates[player.Name] or {}
        if pdata then
            for _ in pairs(active) do
                equippedCount += 1
            end
            local total = 0
            for _ in pairs(pdata.PetInventory.Data or {}) do
                total += 1
            end
            backpackCount = total - equippedCount
        end
    end
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:GetAttribute('b') == 'j' then
            local q = tool:GetAttribute('Quantity') or 1
            fruitCount += q
        end
    end
    local myFarm = getMyFarm()
    if myFarm then
        plantCount = countAllPlants(myFarm)
    end
    return equippedCount, backpackCount, fruitCount, plantCount
end

-- ===============================
-- üîÑ Update UI
-- ===============================
local function GetPlacedEggs()
    local eggs = {}
    for _, egg in ipairs(CollectionService:GetTagged('PetEggServer')) do
        if egg:GetAttribute('EggName') then
            table.insert(eggs, egg)
        end
    end
    return eggs
end

local function GetMaxSlots()
    local data = DataService and DataService:GetData()
    local purchased = data and data.PetsData and data.PetsData.PurchasedEggSlots
        or 0
    return (purchased or 0) + 3
end

local function updateUI()
    local eggs = GetPlacedEggs()
    local maxSlots = GetMaxSlots()
    local lines = {}
    table.insert(lines, ('Slots: %d/%d'):format(#eggs, maxSlots))
    table.insert(lines, '-------------------------')
    for i, egg in ipairs(eggs) do
        local name = egg:GetAttribute('EggName') or egg.Name
        local t = egg:GetAttribute('TimeToHatch') or 0
        local hatchText = (t == 0) and '‚úÖ Ready'
            or (
                TimeHelper and TimeHelper:GenerateColonFormatFromTime(t)
                or tostring(t)
            )
        table.insert(lines, ('[%d] %s | %s'):format(i, name, hatchText))
    end
    local equip, balo, fruits, plants = getExtraStats()
    table.insert(lines, '-------------------------')
    table.insert(lines, ('üêæ Pet equip: %d'):format(equip))
    table.insert(lines, ('üéí Pet balo: %d'):format(balo))
    table.insert(lines, ('üçé Fruit balo: %d'):format(fruits))
    table.insert(lines, ('üå± C√¢y trong v∆∞·ªùn: %d'):format(plants))

    status.Text = 'üåü Farm Status üåü\n' .. table.concat(lines, '\n')
end

task.spawn(function()
    while task.wait(3) do
        pcall(updateUI)
    end
end)

-- ===============================
-- üìå Overlay tr·∫Øng + N√∫t toggle
-- ===============================
local overlayGui = Instance.new('ScreenGui')
overlayGui.Name = 'FullScreenOverlay'
overlayGui.IgnoreGuiInset = true
overlayGui.ResetOnSpawn = false
overlayGui.DisplayOrder = 50 -- d∆∞·ªõi HUD
overlayGui.Parent = game:GetService('CoreGui')

local overlayFrame = Instance.new('Frame')
overlayFrame.Size = UDim2.new(1, 0, 1, 0)
overlayFrame.Position = UDim2.new(0, 0, 0, 0)
overlayFrame.BorderSizePixel = 0
overlayFrame.BackgroundColor3 = Color3.new(1, 1, 1)
overlayFrame.Visible = true -- m·∫∑c ƒë·ªãnh lu√¥n b·∫≠t
overlayFrame.Parent = overlayGui

local toggleButton = Instance.new('TextButton')
toggleButton.Size = UDim2.new(0, 50, 0, 50)
toggleButton.Position = UDim2.new(0, 10, 0.5, -25)
toggleButton.BackgroundColor3 = Color3.new(1, 0, 0)
toggleButton.Text = 'MT'
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 20
toggleButton.Parent = overlayGui

toggleButton.MouseButton1Click:Connect(function()
    overlayFrame.Visible = not overlayFrame.Visible
end)

getgenv().RunningFarm = true
-- ===============================
-- üåü CONFIG CHUNG (b·∫°n ch·ªânh t·∫°i ƒë√¢y)
-- ===============================
getgenv().Config = {
    LoopInterval = 12, -- gi√¢y: m·ªói v√≤ng l·∫∑p t·ªïng

    -- Tr·ªìng c√¢y
    Plant_Seeds = { -- target s·ªë l∆∞·ª£ng c√¢y trong farm
        ['Evo Beetroot I'] = 30,
        ['Evo Blueberry I'] = 30,
        ['Evo Pumpkin I'] = 30,
        ['Evo Mushroom I'] = 30,

        ['Evo Beetroot II'] = 30,
        ['Evo Blueberry II'] = 30,
        ['Evo Pumpkin II'] = 30,
        ['Evo Mushroom II'] = 30,

        ['Evo Beetroot III'] = 30,
        ['Evo Blueberry III'] = 30,
        ['Evo Pumpkin III'] = 30,
        ['Evo Mushroom III'] = 30,
        ['Carrot'] = 10,
        ['Turnip'] = 10,
        ['Parsley'] = 10,
        ['Meyer Lemon'] = 10,
        ['Carnival Pumpkin'] = 10,
        ['Kniphofia'] = 10,
        ['Golden Peach'] = 10,
        ['Maple Resin'] = 10,
        ['Moon Blossom'] = 10,
        ['Bone Blossom'] = 10,
        ['Moon Melon'] = 10,
        ['Maple Apple'] = 10,
        ['Moon Mango'] = 10,
        ['Dragon Pepper'] = 10,
        ['Elephant Ears'] = 10,
        ['Fossilight'] = 10,
        ['Princess Thorn'] = 10,
        ['Coconut'] = 10,
        ['Mushroom'] = 10,
        ['Glowthorn'] = 10,
        ['Pepper'] = 10,
        ['Cacao'] = 10,
        ['Apple'] = 10,
        ['Wispwing'] = 10,
        ['Romanesco'] = 10,
        ['Elder Strawberry'] = 10,
        ['Burning Bud'] = 10,
        ['Giant Pinecone'] = 10,
        ['Corn'] = 10,
        ['Sugar Apple'] = 10,
        ['Ember Lily'] = 10,
        ['Dragon Fruit'] = 10,
        ['Sunbulb'] = 10,
        ['Orange Tulip'] = 10,
        ['Mango'] = 10,
        ['Cactus'] = 10,
        ['Beanstalk'] = 10,
        ['Lightshoot'] = 10,
        ['Grape'] = 10,
        ['Daffodil'] = 10,
        ['Aurora Vine'] = 10,
        ['Grand Tomato'] = 10,
        ['Maple Apple'] = 10,
        ['Princess Thorn'] = 10,
        ['Spiked Mango'] = 10,
        ['Pineapple'] = 10,
        ['King Cabbage'] = 10,
        ['Carnival Pumpkin'] = 10,
        ['Kniphofia'] = 10,
        ['Golden Peach'] = 10,
        ['Maple Resin'] = 10,
    },

    -- V√≤i phun (ƒë·∫∑t theo th·ª© t·ª± ∆∞u ti√™n, m·∫∑c ƒë·ªãnh ƒë·∫∑t ·ªü b√™n ph·∫£i)
    Sprinklers = {
        'Basic Sprinkler',
        'Advanced Sprinkler',
        'Master Sprinkler',
        'Grandmaster Sprinkler',
        'Godly Sprinkler',
    },

    -- Fruit
    skipFruit = { 'Weed', 'StoneFruit' }, -- b·ªè qua t√™n fruit
    skipMutation = { 'Glimmering', 'Golden' }, -- b·ªè qua mutation

    -- Eggs (ƒë·∫∑t & n·ªü + ∆∞u ti√™n khi thi·∫øu pet)
    EggsPlant = {
        { Name = 'Jungle Egg', Amount = 6 },
		{ Name = 'Anti Bee Egg', Amount = 6 },
		{ Name = 'Bug Egg', Amount = 6 },
		{ Name = 'Fall Egg', Amount = 6 },
		{ Name = 'Bee Egg', Amount = 6 },
        { Name = 'Rare Egg', Amount = 2 },
    },
    PetNeedsPlant = { -- v√≠ d·ª•: n·∫øu Rooster < 9 th√¨ ∆∞u ti√™n Rare Egg
    },
    AutoHatch = true,
    PlaceDelay = 0.25,
    HatchDelay = 0.25,

    -- B√°n pet
    PetNoSell = {
			"Tiger",
			"Swan",
			"Red Panda",
			"Space Squirrel",
			"Barn Owl",
			"Phoenix",
			["Shroomie"] = 2,
			["Drake"] = 2,
			["Luminous Sprite"] = 2,
			"Griffin",
			["Glimmering Sprite"] = 5,
			"Cockatrice",
			"Golem",
			"Gnome",
			"Green Bean", 
			"Apple Gazelle", 
			"Lemon Lion", 
			"Peach Wasp",
			"Golden Goose",
			["Spriggan"] = 5,
			["Gorilla Chef"] = 4,
			"Junkbot",
			"Hotdog Daschund",
			"Sunny-Side Chicken",
			"Lobster Thermidor",
			"French Fry Ferret",
			["Starfish"] = 8,
			"Raiju",
			"Corrupted Kodama",
			["Rooster"] = 4,
			"Capybara",
			["Koi"] = 2,
			["Tanchozuru"] = 3,
			["Moth"] = 3, 
			"Kitsune",
			"Corrupted Kitsune",
			"Dilophosaurus",
			"Spinosaurus",
			"Brontosaurus",
			"T-Rex",
			"Fennec Fox",
			"Blood Kiwi",
			["Hamster"] = 2,
			"Disco Bee",
			"Raccoon",
			"Queen Bee",
			"Dragonfly",
			"Butterfly",
			["Tarantula Hawk"] = 2,
			["Wasp"] = 2,
			["Honey Bee"] = 2,
			["Bee"] = 2,
			"Mimic Octopus",
			"Red Fox",
			"Chicken Zombie"
    },
    WeightLimit = 5, -- kg

    -- Cho pet ƒÉn
    HungerThreshold = 0, -- d∆∞·ªõi ng∆∞·ª°ng n√†y s·∫Ω cho ƒÉn

    -- Equip pet
    PetUpLv = { ['Starfish'] = 1 , ["Capybara "] = 1 },
    PetPrioritize = { 
         ["Tarantula Hawk"] = 1,
         ["Sunny-Side Chicken"] = 4,
         ["Hotdog Daschund"] = 4,
         ["Blood Kiwi"] = 8,
         ["Rooster"] = 8,
         ["Starfish"] = 1,
    },
    PetRandom = { ['Wisp'] = 2 },

    -- AutoBuy (ch·∫°y 1 pass / v√≤ng)
    AutoBuy = {
        Seeds = {
            ['Carrot'] = 10,
            ['Strawberry'] = 10,
            ['Blueberry'] = 10,
            ['Orange Tulip'] = 10,
            ['Tomato'] = 10,
            ['Corn'] = 10,
            ['Daffodil'] = 10,
            ['Cauliflower'] = 10,
            ['Watermelon'] = 10,
            ['Rafflesia'] = 10,
            ['Green Apple'] = 10,
            ['Avocado'] = 10,
            ['Banana'] = 10,
            ['Pineapple'] = 10,
            ['Kiwi'] = 10,
            ['Bell Pepper'] = 10,
            ['Prickly Pear'] = 10,
            ['Loquat'] = 10,
            ['Feijoa'] = 10,
            ['Pitcher Plant'] = 10,
            ['Pumpkin'] = 10,
            ['Apple'] = 10,
            ['Bamboo'] = 10,
            ['Coconut'] = 10,
            ['Cactus'] = 10,
            ['Dragon Fruit'] = 10,
            ['Mango'] = 10,
            ['Grape'] = 10,
            ['Mushroom'] = 10,
            ['Pepper'] = 10,
            ['Cacao'] = 10,
            ['Beanstalk'] = 10,
            ['Ember Lily'] = 10,
            ['Sugar Apple'] = 10,
            ['Burning Bud'] = 10,
            ['Giant Pinecone'] = 10,
            ['Elder Strawberry'] = 10,
            ['Romanesco'] = 10,
        },
        Gears = {
            ['Watering Can'] = 2,
            'Trading Ticket',
            'Trowel',
            ['Basic Sprinkler'] = 1,
            'Advanced Sprinkler',
            'Godly Sprinkler',
            'Master Sprinkler',
            'Grandmaster Sprinkler',
            'Recall Wrench',
            'Magnifying Glass',
            'Favorite Tool',
            'Harvest Tool',
            'Friendship Pot',
            'Medium Toy',
            'Medium Treat',
            'Cleaning Spray',
            'Cleansing Pet Shard',
            'Levelup Lollipop',
        },
        Eggs = {
            "Jungle Egg",
			"Bee Egg",
			"Rare Egg",
			"Oasis Egg",
			"Paradise Egg",
			"Anti Bee Egg",
			"Night Egg",
			"Rare Summer Egg",
			"Bug Egg",
			"Mythical Egg",
			"Uncommon Egg",
			"Common Egg",
        },
        EventShop = {
            ['Turnip'] = 1,
            ['Fall Seed Pack'] = 1,
            ['Parsley'] = 1,
            ['Meyer Lemon'] = 1,
            ['Carnival Pumpkin'] = 1,
            ['Kniphofia'] = 1,
            ['Golden Peach'] = 1,
            ['Maple Resin'] = 1,

            -- ‚öôÔ∏è Gear
            ['Firefly Jar'] = 1,
            ['Sky Lantern'] = 1,
            ['Maple Leaf Kite'] = 1,
            ['Leaf Blower'] = 1,
            ['Maple Syrup'] = 1,
            ['Maple Sprinkler'] = 1,
            ['Bonfire'] = 1,
            ['Harvest Basket'] = 1,
            ['Maple Leaf Charm'] = 1,
            ['Golden Acorn'] = 1,
            ['Rake'] = 1,
            ['Acorn Bell'] = 1,
            ['Acorn Lollipop'] = 1,
            ['Super Leaf Blower'] = 1,

            -- üêæ Pets & Eggs
            ['Fall Egg'] = 1,
            ['Chipmunk'] = 1,
            ['Red Squirrel'] = 1,
            ['Salmon'] = 1,
            ['Marmot'] = 1,
            ['Sugar Glider'] = 1,
            ['Woodpecker'] = 1,
            ['Space Squirrel'] = 1,
            ['Mallard'] = 1,
            ['Red Panda'] = 1,

            -- üì¶ Crates & Cosmetics
            ['Fall Crate'] = 1,
            ['Maple Crate'] = 1,
            ['Fall Leaf Chair'] = 1,
            ['Maple Flag'] = 1,
            ['Fall Wreath'] = 1,
            ['Fall Hay Bale'] = 1,
            ['Pile Of Leaves'] = 1,
            ['Flying Kite'] = 1,
            ['Fall Fountain'] = 1,
        },
    },

    -- Ph√° c√¢y
    MaxPlants = 300,
    BreakList = { 'Carrot' },

    -- Webhook (t√πy ch·ªçn)
    WebhookUrl = 'https://discord.com/api/webhooks/1367210306904002630/8gxmUF7Z5nQqSEtprqYz_VwWndHIf8n-bJb1a8u7ONVu6y7bXuUs24YFxhdkNr40gn_A',
    SendAllPets = false,
    PetFilter = {
		"Tiger",
        'Swan',
        'Phoenix',
        'Golden Goose',
        'French Fry Ferret',
        'Cockatrice',
        'Kitsune',
        'Spinosaurus',
        'T-Rex',
        'Disco Bee',
        'Butterfly',
        'Mimic Octopus',
        'Queen Bee',
        'Fennec Fox',
        'Dragonfly',
        'Raccoon',
        'Red Fox',
    },
}

-- ===============================
-- üîß Services & Modules (d√πng chung)
-- ===============================
local RS = game:GetService('ReplicatedStorage')
local Players = game:GetService('Players')
local CollectionService = game:GetService('CollectionService')
local HttpService = game:GetService('HttpService')
local player = Players.LocalPlayer

local DEFAULT_SIDE = 'right' -- m·∫∑c ƒë·ªãnh b√™n ph·∫£i

-- Optional modules (m·ªôt s·ªë game c√≥)
local DataService = nil
pcall(function()
    DataService = require(RS.Modules.DataService)
end)

local ReplicatorClass = nil
pcall(function()
    ReplicatorClass = require(RS.Modules.ReplicationClass)
end)

local PetRegistry = nil
pcall(function()
    PetRegistry = require(RS.Data.PetRegistry)
end)

-- Replicators cho Pets
local ActivePetsService, ActivePetStates, PlayerPetData
if ReplicatorClass then
    ActivePetsService = ReplicatorClass.new('ActivePetsService_Replicator')
    pcall(function()
        ActivePetsService:YieldUntilData()
    end)
    local tbl = ActivePetsService and ActivePetsService:YieldUntilData().Table
        or {}
    ActivePetStates = tbl.ActivePetStates or {}
    PlayerPetData = tbl.PlayerPetData or {}
end

-- GameEvents
local PlantRE = RS.GameEvents:FindFirstChild('Plant_RE')
local SprinklerRE = RS.GameEvents:FindFirstChild('SprinklerService')
local PetEggService = RS.GameEvents:FindFirstChild('PetEggService')
local SellInventoryRE = RS.GameEvents:FindFirstChild('Sell_Inventory')
local RemoveItemRE = RS.GameEvents:FindFirstChild('Remove_Item')
local SellPetRE = RS.GameEvents:FindFirstChild('SellPet_RE')
local ActivePetRE = RS.GameEvents:FindFirstChild('ActivePetService')
local PetsServiceRE = RS.GameEvents:FindFirstChild('PetsService')
local BuySeed = RS.GameEvents:FindFirstChild('BuySeedStock')
local BuyGear = RS.GameEvents:FindFirstChild('BuyGearStock')
local BuyEgg = RS.GameEvents:FindFirstChild('BuyPetEgg')
local BuyEventShop = RS.GameEvents:FindFirstChild('BuyEventShopStock')

-- Crops
local Crops = RS.GameEvents:FindFirstChild('Crops')
local CollectRemote = Crops and Crops:FindFirstChild('Collect')

-- ===============================
-- üß∞ Helpers
-- ===============================
local function waitForData()
    if not DataService then
        return nil
    end
    local data
    repeat
        data = DataService:GetData()
        task.wait(0.2)
    until (not DataService) or (data and (data.PetsData or data.InventoryData))
    return data
end

local function equipOnly(itemName)
    if not player.Character then
        return
    end
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and not string.find(tool.Name, itemName) then
            tool.Parent = player.Backpack
            warn('üõë Unequip:', tool.Name)
        end
    end
    local hasItem = false
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and string.find(tool.Name, itemName) then
            hasItem = true
            break
        end
    end
    if not hasItem then
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA('Tool') and string.find(tool.Name, itemName) then
                tool.Parent = player.Character
                print('üì¶ Auto equip:', tool.Name)
                break
            end
        end
    end
end

local function getMyFarm()
    for _, farm in ipairs(workspace:GetChildren()) do
        if farm.Name == 'Farm' then
            for _, subFarm in ipairs(farm:GetChildren()) do
                if
                    subFarm.Name == 'Farm'
                    and subFarm:FindFirstChild('Important')
                    and subFarm.Important:FindFirstChild('Data')
                    and subFarm.Important.Data:FindFirstChild('Owner')
                    and subFarm.Important.Data.Owner.Value == player.Name
                then
                    return subFarm
                end
            end
        end
    end
    return nil
end

local function getPlots(myFarm, side)
    local spots = {}
    if not myFarm then
        return spots
    end
    local pl = myFarm.Important:FindFirstChild('Plant_Locations')
    if not pl then
        return spots
    end
    for _, node in ipairs(pl:GetChildren()) do
        if node:IsA('BasePart') then
            local s = (node:GetAttribute('Side') or ''):lower()
            if s == (side or DEFAULT_SIDE):lower() then
                table.insert(spots, node)
            end
        end
    end
    return spots
end

local function getMiddlePlot(spots)
    if #spots == 0 then
        return nil
    end
    table.sort(spots, function(a, b)
        return a.Position.Z < b.Position.Z
    end)
    local midIndex = math.ceil(#spots / 2)
    return spots[midIndex]
end

-- ===============================
-- üå± TR·ªíNG C√ÇY (from tr·ªìng c√¢y tele) - single pass
-- ===============================
local function hasSeed(seedName)
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:IsA('Tool') and string.find(tool.Name, seedName .. ' Seed') then
            return true
        end
    end
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and string.find(tool.Name, seedName .. ' Seed') then
            return true
        end
    end
    return false
end

local function countPlants(myFarm, itemName)
    if not myFarm then
        return 0
    end
    local folder = myFarm.Important:FindFirstChild('Plants_Physical')
    if not folder then
        return 0
    end
    local count = 0
    for _, plant in ipairs(folder:GetChildren()) do
        if plant.Name == itemName then
            count += 1
        end
    end
    return count
end

local function getCenterBetweenSides(myFarm)
    if not myFarm then
        return nil
    end
    local pl = myFarm.Important:FindFirstChild('Plant_Locations')
    if not pl then
        return nil
    end
    local left, right
    for _, node in ipairs(pl:GetChildren()) do
        if node:IsA('BasePart') then
            local sideAttr = (node:GetAttribute('Side') or ''):lower()
            if sideAttr == 'left' and not left then
                left = node
            elseif sideAttr == 'right' and not right then
                right = node
            end
        end
    end
    if left and right then
        local centerPos = (left.Position + right.Position) / 2
        return CFrame.new(centerPos + Vector3.new(0, 3, 0))
    end
    return nil
end

local function teleportToCenter(myFarm)
    local hrp = player.Character
        and player.Character:FindFirstChild('HumanoidRootPart')
    local cf = getCenterBetweenSides(myFarm)
    if hrp and cf then
        hrp.CFrame = cf
        print('üöÄ Teleport v·ªÅ gi·ªØa farm (tr√°i-ph·∫£i)')
    end
end

local function plantSeedAt(pos, seedName)
    if not PlantRE then
        return
    end
    equipOnly(seedName .. ' Seed')
    PlantRE:FireServer(pos, seedName)
    print(
        ('‚úÖ Tr·ªìng %s t·∫°i (%.1f, %.1f, %.1f)'):format(
            seedName,
            pos.X,
            pos.Y,
            pos.Z
        )
    )
end

function DoPlanting()
    local myFarm = getMyFarm()
    if not myFarm then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y farm c·ªßa b·∫°n!')
        return
    end

    local plots = getPlots(myFarm, DEFAULT_SIDE)
    local midPlot = getMiddlePlot(plots)
    if not midPlot then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y plot ·ªü b√™n ' .. DEFAULT_SIDE)
        return
    end

    for seedName, target in pairs(getgenv().Config.Plant_Seeds) do
        local current = countPlants(myFarm, seedName)
        print(('üîé %s hi·ªán c√≥ %d/%d'):format(seedName, current, target))
        if current < target then
            if not hasSeed(seedName) then
                warn(
                    '‚è≠Ô∏è B·ªè qua '
                        .. seedName
                        .. ' (kh√¥ng c√≥ seed trong balo)'
                )
            else
                local need = target - current
                print(
                    ('‚ö†Ô∏è Thi·∫øu %d %s ‚Üí b·∫Øt ƒë·∫ßu tr·ªìng th√™m'):format(
                        need,
                        seedName
                    )
                )
                for i = 1, need do
                    teleportToCenter(myFarm)
                    task.wait(1)
                    plantSeedAt(midPlot.Position, seedName)
                    task.wait(1)
                end
            end
        else
            print(
                ('‚úÖ ƒê·ªß s·ªë l∆∞·ª£ng c√¢y %s (%d/%d)'):format(
                    seedName,
                    current,
                    target
                )
            )
        end
    end
end

-- ===============================
-- üö∞ SPRINKLERS (from ƒê·∫∂T V√íI PHUN) - single pass
-- ===============================
local function hasSprinkler(myFarm, sprName)
    if not myFarm then
        return false
    end
    local folder = myFarm.Important:FindFirstChild('Objects_Physical')
    if not folder then
        return false
    end
    for _, obj in ipairs(folder:GetChildren()) do
        if obj.Name == sprName then
            return true
        end
    end
    return false
end

local function placeSprinklerAt(pos, sprName)
    if not SprinklerRE then
        return
    end
    equipOnly(sprName)
    local cf = CFrame.new(pos)
    SprinklerRE:FireServer('Create', cf)
    print(
        ('‚úÖ ƒê√£ ƒë·∫∑t %s t·∫°i (%.1f, %.1f, %.1f)'):format(
            sprName,
            pos.X,
            pos.Y,
            pos.Z
        )
    )
end

function DoSprinklers()
    local myFarm = getMyFarm()
    if not myFarm then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y farm c·ªßa b·∫°n!')
        return
    end

    local plots = getPlots(myFarm, DEFAULT_SIDE)
    local midPlot = getMiddlePlot(plots)
    if not midPlot then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y plot ·ªü b√™n ' .. DEFAULT_SIDE)
        return
    end

    for _, sprName in ipairs(getgenv().Config.Sprinklers) do
        if hasSprinkler(myFarm, sprName) then
            print('‚úÖ ƒê√£ c√≥ ' .. sprName .. ', b·ªè qua.')
        else
            placeSprinklerAt(midPlot.Position, sprName)
            task.wait(0.8)
        end
    end
end

-- ===============================
-- üåæ HARVEST FRUITS (from thu hoach trai b·∫±ng model) - single pass
-- ===============================
local YIELD_LIMIT = 100
local HARVEST_DELAY = 0.5

local function shouldSkipFruitModel(fruit)
    for _, bad in ipairs(getgenv().Config.skipFruit or {}) do
        if fruit.Name == bad then
            return true
        end
    end
    for _, badAttr in ipairs(getgenv().Config.skipMutation or {}) do
        if fruit:GetAttribute(badAttr) then
            return true
        end
    end
    return false
end

function DoHarvest()
    if not CollectRemote then
        return
    end
    local myFarm = getMyFarm()
    if not myFarm then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y farm c·ªßa b·∫°n!')
        return
    end

    local plantsFolder = myFarm.Important:FindFirstChild('Plants_Physical')
    if not plantsFolder then
        return
    end

    local collected = 0
    for _, plant in ipairs(plantsFolder:GetChildren()) do
        local fruitsFolder = plant:FindFirstChild('Fruits')
        if fruitsFolder then
            for _, fruit in ipairs(fruitsFolder:GetChildren()) do
                if not shouldSkipFruitModel(fruit) then
                    CollectRemote:FireServer({ fruit })
                    print('‚úÖ Thu ho·∫°ch:', fruit:GetFullName())
                    collected += 1
                    task.wait(HARVEST_DELAY)
                    if collected >= YIELD_LIMIT then
                        return
                    end
                else
                    print('‚è≠Ô∏è B·ªè qua:', fruit:GetFullName())
                end
            end
        end
    end
end

-- ===============================
-- üß∫ SELL FRUITS (from sell c√¢y) - single pass
-- ===============================
local SELL_NPC_CFRAME = CFrame.new(86.59, 2.999, 0.42)

function DoSellFruits()
    if not SellInventoryRE then
        return
    end
    local hrp = player.Character
        and player.Character:FindFirstChild('HumanoidRootPart')
    if not hrp then
        return
    end
    hrp.CFrame = SELL_NPC_CFRAME
    task.wait(0.6)
    SellInventoryRE:FireServer()
    print('‚úÖ ƒê√£ b√°n to√†n b·ªô fruit trong Backpack')
end

-- ===============================
-- ü•ö EGGS PLACE + HATCH (from dat trung 4) - single pass
-- ===============================
local MAX_EGGS = 8
local Y_OFFSET = 2.0
local CHECK_RAD = 3.5

local function GetMaxSlots()
    local data = waitForData()
    local val = data and data.PetsData and data.PetsData.PurchasedEggSlots or 0
    return (val or 0) + 3
end

local function GetPlacedEggs()
    local eggs = {}
    for _, egg in ipairs(CollectionService:GetTagged('PetEggServer')) do
        if egg:GetAttribute('EggName') then
            table.insert(eggs, egg)
        end
    end
    return eggs
end

local function countEggsByName(eggName)
    local count = 0
    for _, egg in ipairs(GetPlacedEggs()) do
        if egg:GetAttribute('EggName') == eggName then
            count += 1
        end
    end
    return count
end

local function equipEggTool(eggName)
    equipOnly(eggName)
    for _, tool in
        ipairs(player.Character and player.Character:GetChildren() or {})
    do
        if tool:IsA('Tool') and string.find(tool.Name, eggName) then
            return tool
        end
    end
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:IsA('Tool') and string.find(tool.Name, eggName) then
            tool.Parent = player.Character
            return tool
        end
    end
    return nil
end

local function hasEggNearby(pos, radius)
    radius = radius or CHECK_RAD
    local parts = workspace:GetPartBoundsInBox(
        CFrame.new(pos),
        Vector3.new(radius * 2, radius * 2, radius * 2)
    )
    for _, p in ipairs(parts) do
        local name = (p.Name or ''):lower()
        if name:find('egg') or name:find('trung') then
            return true
        end
    end
    return false
end

local function GetCanPlantNode(myFarm)
    if not myFarm then
        return nil
    end
    local pl = myFarm.Important:FindFirstChild('Plant_Locations')
    if not pl then
        return nil
    end
    for _, node in ipairs(pl:GetChildren()) do
        if node.Name == 'Can_Plant' then
            local sideAttr = node:GetAttribute('Side')
            if sideAttr and sideAttr:lower() == 'left' then
                return node
            end
        end
    end
    return nil
end

local function GetCandidatePositions(maxNeeded)
    maxNeeded = math.max(0, math.min(MAX_EGGS, maxNeeded or MAX_EGGS))
    local myFarm = getMyFarm()
    if not myFarm then
        return {}
    end
    local canPlant = GetCanPlantNode(myFarm)
    if not canPlant then
        return {}
    end

    local spots = {}
    if canPlant:IsA('BasePart') then
        local size, cf = canPlant.Size, canPlant.CFrame
        local rows, cols = 2, 4
        if size.Z > size.X then
            rows, cols = 4, 2
        end
        local cellX, cellZ = size.X / cols, size.Z / rows
        for r = 1, rows do
            for c = 1, cols do
                local lx = (c - 0.5 - cols / 2) * cellX
                local lz = (r - 0.5 - rows / 2) * cellZ
                local pos = (cf * CFrame.new(lx, 0, lz)).p
                    + Vector3.new(0, Y_OFFSET, 0)
                local safeRad = math.min(cellX, cellZ) * 0.45
                if not hasEggNearby(pos, safeRad) then
                    table.insert(spots, pos)
                    if #spots >= maxNeeded then
                        return spots
                    end
                end
            end
        end
    end
    return spots
end

local function countEquippedPets(petName)
    if not PlayerPetData then
        return 0
    end
    local myPetData = PlayerPetData[player.Name]
    local activePets = (ActivePetStates and ActivePetStates[player.Name]) or {}
    local total = 0
    if not myPetData then
        return 0
    end
    for uuid, _ in pairs(activePets) do
        local petData = myPetData.PetInventory.Data[uuid]
        if petData and petData.PetType == petName then
            total += 1
        end
    end
    return total
end

local function countBackpackPets(petName)
    if not PlayerPetData then
        return 0
    end
    local myPetData = PlayerPetData[player.Name]
    if not myPetData then
        return 0
    end
    local activePets = (ActivePetStates and ActivePetStates[player.Name]) or {}
    local total = 0
    for uuid, petData in pairs(myPetData.PetInventory.Data or {}) do
        if petData.PetType == petName and not activePets[uuid] then
            total += 1
        end
    end
    return total
end

local function countPets(petName)
    return countEquippedPets(petName) + countBackpackPets(petName)
end

local function getPriorityEggs()
    local needEggs = {}
    for condition, eggName in pairs(getgenv().Config.PetNeedsPlant or {}) do
        local petName, limit = condition:match('(.+)<(%d+)')
        limit = tonumber(limit)
        if petName and limit then
            local current = countPets(petName)
            print(('üîé Check %s: %d/%d'):format(petName, current, limit))
            if current < limit then
                print(
                    ("‚ö†Ô∏è Thi·∫øu %d %s ‚Üí c·∫ßn '%s'"):format(
                        limit - current,
                        petName,
                        eggName
                    )
                )
                table.insert(
                    needEggs,
                    { Egg = eggName, Missing = limit - current }
                )
            else
                print(
                    ('‚úÖ %s ƒë·ªß s·ªë l∆∞·ª£ng (%d/%d)'):format(
                        petName,
                        current,
                        limit
                    )
                )
            end
        end
    end
    return needEggs
end

local function ensureEggCount(eggName, targetAmount)
    if not PetEggService then
        return false
    end
    local current = countEggsByName(eggName)
    if current >= targetAmount then
        print(
            ("‚úÖ '%s' ƒë√£ ƒë·ªß %d/%d egg"):format(
                eggName,
                current,
                targetAmount
            )
        )
        return true
    end
    local need = targetAmount - current
    local remaining = math.max(0, GetMaxSlots() - #GetPlacedEggs())
    if remaining <= 0 then
        print('üö´ Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ ƒë·∫∑t egg')
        return false
    end
    local toPlace = math.min(need, remaining)
    if not equipEggTool(eggName) then
        print("‚ùå Kh√¥ng t√¨m th·∫•y tool cho '" .. eggName .. "'")
        return false
    end
    local spots = GetCandidatePositions(toPlace)
    if #spots == 0 then
        print(
            "‚ö†Ô∏è Kh√¥ng c√≥ v·ªã tr√≠ h·ª£p l·ªá ƒë·ªÉ ƒë·∫∑t '"
                .. eggName
                .. "'"
        )
        return false
    end
    for i = 1, math.min(toPlace, #spots) do
        PetEggService:FireServer('CreateEgg', spots[i])
        print(("ü•ö ƒê√£ ƒë·∫∑t '%s' t·∫°i v·ªã tr√≠ #%d"):format(eggName, i))
        task.wait(getgenv().Config.PlaceDelay or 0.20)
    end
    return true
end

local function ensureEggsFallback()
    for _, eggInfo in ipairs(getgenv().Config.EggsPlant or {}) do
        local eggName, amount = eggInfo.Name, eggInfo.Amount
        local ok = ensureEggCount(eggName, amount)
        if not ok then
            print(
                "‚ùå Kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c '"
                    .. eggName
                    .. "', th·ª≠ egg ti·∫øp theo..."
            )
        end
    end
end

local function ensureEggsWithPriority()
    local priority = getPriorityEggs()
    if #priority > 0 then
        print('üëâ Case 1: Thi·∫øu pet ‚Üí ∆Øu ti√™n PetNeedsPlant')
        local placedAny = false
        for _, info in ipairs(priority) do
            local slotsLeft = math.max(0, GetMaxSlots() - #GetPlacedEggs())
            if slotsLeft <= 0 then
                break
            end
            if equipEggTool(info.Egg) then
                print(
                    ("üì¶ D√πng to√†n b·ªô %d slot c√≤n l·∫°i cho '%s'"):format(
                        slotsLeft,
                        info.Egg
                    )
                )
                if
                    ensureEggCount(
                        info.Egg,
                        countEggsByName(info.Egg) + slotsLeft
                    )
                then
                    placedAny = true
                end
                break -- ∆∞u ti√™n tuy·ªát ƒë·ªëi
            else
                print(
                    ("‚ùå Kh√¥ng c√≥ tool cho '%s' ‚Üí b·ªè qua"):format(
                        info.Egg
                    )
                )
            end
        end
        if not placedAny then
            print(
                'üëâ Case 2: Kh√¥ng c√≥ tr·ª©ng PetNeedsPlant kh·∫£ d·ª•ng ‚Üí fallback EggsPlant'
            )
            ensureEggsFallback()
        end
    else
        print('üëâ Case 3: Pet ƒë·ªß ‚Üí fallback EggsPlant')
        ensureEggsFallback()
    end
end

local function sendWebhookAsync(playerName, petName, rarity, imageUrl)
    if
        not (getgenv().Config.WebhookUrl and getgenv().Config.WebhookUrl ~= '')
    then
        return
    end
    task.spawn(function()
        local embed = {
            ['title'] = 'üéâ Pet m·ªõi v·ª´a xu·∫•t hi·ªán!',
            ['color'] = 65280,
            ['fields'] = {
                {
                    ['name'] = 'üë§ Ng∆∞·ªùi ch∆°i',
                    ['value'] = playerName,
                    ['inline'] = true,
                },
                {
                    ['name'] = 'üêæ Pet',
                    ['value'] = petName,
                    ['inline'] = true,
                },
                {
                    ['name'] = 'üåü Rarity',
                    ['value'] = rarity,
                    ['inline'] = true,
                },
            },
            ['thumbnail'] = { ['url'] = imageUrl or '' },
        }
        local payload = HttpService:JSONEncode({ embeds = { embed } })
        pcall(function()
            request({
                Url = getgenv().Config.WebhookUrl,
                Method = 'POST',
                Headers = { ['Content-Type'] = 'application/json' },
                Body = payload,
            })
        end)
    end)
end

local function hatchReadyEggs()
    if not PetEggService then
        return
    end
    for _, egg in ipairs(GetPlacedEggs()) do
        local ready, t =
            egg:GetAttribute('Ready'), egg:GetAttribute('TimeToHatch') or 0
        if ready == true or (t and t <= 0) then
            local eggName = egg:GetAttribute('EggName') or egg.Name
            PetEggService:FireServer('HatchPet', egg)
            print("üê£ Egg '" .. eggName .. "' ƒë√£ n·ªü!")

            if PetRegistry then
                if
                    getgenv().Config.SendAllPets
                    or table.find(getgenv().Config.PetFilter or {}, eggName)
                then
                    local petInfo = PetRegistry.PetList[eggName]
                    if petInfo then
                        local rarity = petInfo.Rarity or 'Unknown'
                        local icon = petInfo.Icon or ''
                        local imageUrl = ''
                        if icon ~= '' then
                            imageUrl = 'https://www.roblox.com/asset-thumbnail/image?assetId='
                                .. tostring(icon):gsub('rbxassetid://', '')
                                .. '&width=420&height=420&format=png'
                        end
                        sendWebhookAsync(player.Name, eggName, rarity, imageUrl)
                    end
                end
            end

            task.wait(getgenv().Config.HatchDelay or 0.25)
        end
    end
end

function DoEggs()
    ensureEggsWithPriority()
    if getgenv().Config.AutoHatch then
        hatchReadyEggs()
    end
end

-- ===============================
-- üêæ SELL PETS (from sell pet) - single pass
-- ===============================
local function equipOnlyToolUUID(uuid)
    if not player.Character then
        return
    end
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and tool:GetAttribute('PET_UUID') ~= uuid then
            tool.Parent = player.Backpack
            warn('üõë Unequip:', tool.Name)
        end
    end
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:IsA('Tool') and tool:GetAttribute('PET_UUID') == uuid then
            tool.Parent = player.Character
            print('üì¶ Auto equip Pet Tool:', tool.Name)
            return tool
        end
    end
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and tool:GetAttribute('PET_UUID') == uuid then
            return tool
        end
    end
    return nil
end

local function GetKeepLimit(petName)
    local tbl = getgenv().Config.PetNoSell or {}
    local v = tbl[petName]
    if type(v) == 'number' then
        return v
    end
    if table.find(tbl, petName) then
        return math.huge
    end
    return 0
end

local function CountPets(inventory)
    local counts = {}
    for _, pet in pairs(inventory) do
        counts[pet.PetType] = (counts[pet.PetType] or 0) + 1
    end
    return counts
end

local function SellPet(uuid, petName, level, weight)
    if not SellPetRE then
        return false
    end
    local tool = equipOnlyToolUUID(uuid)
    if tool then
        print(
            ('üí° B√°n %s | Lv.%d | %.1fkg'):format(
                petName,
                level or 1,
                weight or 0
            )
        )
        local hrp = player.Character
            and player.Character:FindFirstChild('HumanoidRootPart')
        if hrp then
            hrp.CFrame = SELL_NPC_CFRAME
        end
        task.wait(0.2)
        SellPetRE:FireServer(tool)
        return true
    end
end

function DoSellPets()
    if not DataService then
        return
    end
    local data = DataService:GetData()
    local pets = data and data.PetsData and data.PetsData.PetInventory.Data
    if not pets then
        return
    end

    local PetUtilities = nil
    pcall(function()
        PetUtilities = require(RS.Modules.PetServices.PetUtilities)
    end)

    local counts = CountPets(pets)
    for uuid, pet in pairs(pets) do
        local name, pdata = pet.PetType, pet.PetData
        local level = pdata and pdata.Level or 1
        local weight = PetUtilities
                and PetUtilities:CalculateWeight(
                    pdata and pdata.BaseWeight or 1,
                    level
                )
            or 1

        local keepLimit = GetKeepLimit(name)
        local currentCount = counts[name] or 0
        local shouldSell = false

        if keepLimit == 0 then
            shouldSell = (weight < getgenv().Config.WeightLimit)
        elseif currentCount > keepLimit then
            shouldSell = true
            counts[name] = (counts[name] or 1) - 1
        end

        if shouldSell then
            if SellPet(uuid, name, level, weight) then
                task.wait(1.0)
            end
        end
    end
end

-- ===============================
-- üçΩÔ∏è FEED PETS (from cho pet ƒÉn) - single pass
-- ===============================
local function getCurrentFoodType()
    for _, tool in
        ipairs(player.Character and player.Character:GetChildren() or {})
    do
        if tool:IsA('Tool') then
            local b = tool:GetAttribute('b')
            if b == 'j' then
                return 'Fruit', tool
            elseif b == 'u' then
                return 'PetFood', tool
            end
        end
    end
    return nil, nil
end

local function equipOnlyFood(foodType)
    if not player.Character then
        return
    end
    local targetAttr = (foodType == 'Fruit' and 'j')
        or (foodType == 'PetFood' and 'u')
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') then
            local b = tool:GetAttribute('b')
            if b ~= targetAttr then
                tool.Parent = player.Backpack
                warn('üõë Unequip:', tool.Name)
            end
        end
    end
    local hasItem = false
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA('Tool') and tool:GetAttribute('b') == targetAttr then
            hasItem = true
            break
        end
    end
    if not hasItem then
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA('Tool') and tool:GetAttribute('b') == targetAttr then
                tool.Parent = player.Character
                print('üçΩÔ∏è Auto equip:', tool.Name, '| Lo·∫°i:', foodType)
                return tool
            end
        end
    end
end

local function equipRandomFood()
    local t = getCurrentFoodType()
    if t then
        return
    end
    local pick = math.random(1, 2) == 1 and 'Fruit' or 'PetFood'
    return equipOnlyFood(pick)
end

local function GetEquippedPets()
    if not ActivePetStates or not PlayerPetData then
        return {}
    end
    local playerName = player.Name
    local myPetData = PlayerPetData[playerName]
    local activePets = ActivePetStates[playerName] or {}
    if not myPetData then
        return {}
    end

    local equippedPets = {}
    for uuid, _ in pairs(activePets) do
        local petData = myPetData.PetInventory.Data[uuid]
        if petData then
            table.insert(equippedPets, {
                UUID = uuid,
                PetType = petData.PetType,
                Level = petData.PetData and petData.PetData.Level or 'N/A',
                Hunger = petData.PetData and petData.PetData.Hunger or 'N/A',
            })
        end
    end
    return equippedPets
end

function DoFeedPets()
    if not ActivePetRE then
        return
    end
    local pets = GetEquippedPets()
    local hungry = {}
    for _, pet in ipairs(pets) do
        if
            type(pet.Hunger) == 'number'
            and pet.Hunger < (getgenv().Config.HungerThreshold or 20)
        then
            table.insert(hungry, pet)
        end
    end
    if #hungry > 0 then
        local _ = equipRandomFood()
        for _, pet in ipairs(hungry) do
            print(
                '‚ö†Ô∏è Pet ƒë√≥i:',
                pet.UUID,
                pet.PetType,
                '| Hunger:',
                pet.Hunger
            )
            ActivePetRE:FireServer('Feed', pet.UUID)
        end
    else
        local currentType, tool = getCurrentFoodType()
        if tool then
            tool.Parent = player.Backpack
            print('‚úÖ Kh√¥ng c√≥ pet ƒë√≥i, ƒë√£ c·∫•t:', tool.Name)
        end
    end
end

-- ===============================
-- üß© EQUIP PETS (from trang b·ªã pet phi√™n b·∫£n ho√†n ch·ªânh) - single pass
-- ===============================
local function getPetUUIDByType(petType)
    local backpack = player:FindFirstChild('Backpack')
    if not backpack then
        return nil
    end
    for _, tool in ipairs(backpack:GetChildren()) do
        local uuid = tool:GetAttribute('PET_UUID')
        if uuid and tool.Name:lower():find(petType:lower()) then
            return uuid
        end
    end
    return nil
end

local function GetActivePets()
    if not ReplicatorClass then
        return {}
    end
    local pets = {}
    local ok, dataObj = pcall(function()
        return ReplicatorClass.new('ActivePetsService_Replicator')
            :YieldUntilData().Table
    end)
    if not ok or not dataObj then
        return {}
    end
    local activeStates = dataObj.ActivePetStates
    local playerData = dataObj.PlayerPetData
    for pid, states in pairs(activeStates) do
        local pdata = playerData[pid] or playerData[tonumber(pid)]
        if pdata then
            for uuid, _ in pairs(states) do
                local pinfo = pdata.PetInventory.Data[uuid]
                if pinfo then
                    table.insert(pets, { UUID = uuid, PetType = pinfo.PetType })
                end
            end
        end
    end
    return pets
end

local function ForceEquip(petType, target, counts, numEquipped, maxSlots, label)
    local current = counts[petType] or 0
    while current < target and numEquipped < maxSlots do
        local uuid = getPetUUIDByType(petType)
        if not uuid then
            warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trong backpack:', petType)
            break
        end
        if PetsServiceRE then
            PetsServiceRE:FireServer('EquipPet', uuid, CFrame.new(40, 0, -74))
        end
        current += 1
        numEquipped += 1
        counts[petType] = current
        print('‚úÖ Equip', label, petType, '(', current, '/', target, ')')
        task.wait(0.2)
    end
    return current, numEquipped
end

local function inUpLv(t)
    return (getgenv().Config.PetUpLv or {})[t] ~= nil
end
local function inPrioritize(t)
    return (getgenv().Config.PetPrioritize or {})[t] ~= nil
end
local function inRandom(t)
    return (getgenv().Config.PetRandom or {})[t] ~= nil
end

local function CategorizeEquipped(equipped)
    local listRandom, listPrior, listOthers = {}, {}, {}
    for _, pet in ipairs(equipped) do
        local t = pet.PetType
        if inRandom(t) then
            table.insert(listRandom, pet)
        elseif inPrioritize(t) then
            table.insert(listPrior, pet)
        elseif not inUpLv(t) then
            table.insert(listOthers, pet)
        end
    end
    return listRandom, listPrior, listOthers
end

local function UnequipLast(list, counts)
    local idx = #list
    if idx == 0 then
        return false
    end
    local pet = list[idx]
    if PetsServiceRE then
        PetsServiceRE:FireServer('UnequipPet', pet.UUID)
    end
    counts[pet.PetType] = (counts[pet.PetType] or 1) - 1
    table.remove(list, idx)
    print('‚ùå Unequip', pet.PetType, pet.UUID)
    task.wait(0.15)
    return true
end

local function MakeRoom(needSlots, listA, listB, counts, numEquipped)
    local freed = 0
    while freed < needSlots do
        local ok = false
        if listA and #listA > 0 then
            ok = UnequipLast(listA, counts)
        elseif listB and #listB > 0 then
            ok = UnequipLast(listB, counts)
        else
            break
        end
        if ok then
            freed += 1
            numEquipped -= 1
        end
    end
    return freed, numEquipped
end

function DoEquipPets()
    if not DataService then
        return
    end
    local equipped = GetActivePets()
    local counts, numEquipped = {}, 0
    for _, pet in ipairs(equipped) do
        counts[pet.PetType] = (counts[pet.PetType] or 0) + 1
        numEquipped += 1
    end

    local pdata = DataService:GetData()
    local maxSlots = pdata
            and pdata.PetsData
            and pdata.PetsData.MutableStats
            and pdata.PetsData.MutableStats.MaxEquippedPets
        or 5
    print('üìä Slot:', numEquipped .. '/' .. maxSlots)

    local listRandom, listPrior, listOthers = CategorizeEquipped(equipped)
    while #listOthers > 0 do
        UnequipLast(listOthers, counts)
        numEquipped -= 1
    end

    local function freeSlots()
        return math.max(0, maxSlots - numEquipped)
    end

    if maxSlots < 8 then
        local needUp = 0
        for petType, target in pairs(getgenv().Config.PetUpLv or {}) do
            local cur = counts[petType] or 0
            if target > cur then
                needUp += (target - cur)
            end
        end
        if needUp > freeSlots() then
            local toFree = needUp - freeSlots()
            local freed
            freed, numEquipped =
                MakeRoom(toFree, listRandom, listPrior, counts, numEquipped)
            if freed < toFree then
                warn(
                    '‚ö†Ô∏è Kh√¥ng ƒë·ªß slot ƒë·ªÉ ƒë·∫£m b·∫£o PetUpLv t·ªëi thi·ªÉu.'
                )
            end
        end
        for petType, target in pairs(getgenv().Config.PetUpLv or {}) do
            counts[petType], numEquipped = ForceEquip(
                petType,
                target,
                counts,
                numEquipped,
                maxSlots,
                'PetUpLv'
            )
        end
    end

    do
        local needPrior = 0
        for petType, target in pairs(getgenv().Config.PetPrioritize or {}) do
            local cur = counts[petType] or 0
            if target > cur then
                needPrior += (target - cur)
            end
        end
        if needPrior > 0 and needPrior > freeSlots() then
            local toFree = needPrior - freeSlots()
            local freed
            freed, numEquipped =
                MakeRoom(toFree, listRandom, nil, counts, numEquipped)
            if freed < toFree then
                warn(
                    '‚ö†Ô∏è Kh√¥ng ƒë·ªß slot ƒë·ªÉ ƒë·∫£m b·∫£o PetPrioritize theo c·∫•u h√¨nh.'
                )
            end
        end
        for petType, target in pairs(getgenv().Config.PetPrioritize or {}) do
            counts[petType], numEquipped = ForceEquip(
                petType,
                target,
                counts,
                numEquipped,
                maxSlots,
                'PetPrioritize'
            )
        end
    end

    for petType, target in pairs(getgenv().Config.PetRandom or {}) do
        local current = counts[petType] or 0
        while current < target and numEquipped < maxSlots do
            local uuid = getPetUUIDByType(petType)
            if not uuid then
                warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trong backpack:', petType)
                break
            end
            if PetsServiceRE then
                PetsServiceRE:FireServer(
                    'EquipPet',
                    uuid,
                    CFrame.new(40, 0, -74)
                )
            end
            current += 1
            numEquipped += 1
            counts[petType] = current
            print(
                '‚úÖ Equip PetRandom',
                petType,
                '(',
                current,
                '/',
                target,
                ')'
            )
            task.wait(0.15)
        end
    end
end

-- ===============================
-- üõí AUTO BUY (from mua ƒë·ªì all) - single pass
-- ===============================
local ShopIndexMap = {
    ['Turnip'] = 1,
    ['Fall Seed Pack'] = 1,
    ['Parsley'] = 1,
    ['Meyer Lemon'] = 1,
    ['Carnival Pumpkin'] = 1,
    ['Kniphofia'] = 1,
    ['Golden Peach'] = 1,
    ['Maple Resin'] = 1,

    ['Firefly Jar'] = 2,
    ['Sky Lantern'] = 2,
    ['Maple Leaf Kite'] = 2,
    ['Leaf Blower'] = 2,
    ['Maple Syrup'] = 2,
    ['Maple Sprinkler'] = 2,
    ['Bonfire'] = 2,
    ['Harvest Basket'] = 2,
    ['Maple Leaf Charm'] = 2,
    ['Golden Acorn'] = 2,
    ['Rake'] = 2,
    ['Acorn Bell'] = 2,
    ['Acorn Lollipop'] = 2,
    ['Super Leaf Blower'] = 2,

    ['Fall Egg'] = 3,
    ['Chipmunk'] = 3,
    ['Red Squirrel'] = 3,
    ['Salmon'] = 3,
    ['Marmot'] = 3,
    ['Sugar Glider'] = 3,
    ['Woodpecker'] = 3,
    ['Space Squirrel'] = 3,
    ['Mallard'] = 3,
    ['Red Panda'] = 3,

    ['Fall Crate'] = 4,
    ['Maple Crate'] = 4,
    ['Fall Leaf Chair'] = 4,
    ['Maple Flag'] = 4,
    ['Fall Wreath'] = 4,
    ['Fall Hay Bale'] = 4,
    ['Pile Of Leaves'] = 4,
    ['Flying Kite'] = 4,
    ['Fall Fountain'] = 4,
}

local function countInBackpack(itemName)
    local function getCount(tool)
        local attrs = tool:GetAttributes()
        if attrs.Quantity then
            return attrs.Quantity
        end
        if attrs.Uses then
            return attrs.Uses
        end
        if attrs.e then
            return attrs.e
        end
        return 1
    end
    local count = 0
    for _, obj in ipairs(player.Backpack:GetChildren()) do
        if string.find(obj.Name, itemName) then
            count += getCount(obj)
        end
    end
    for _, obj in
        ipairs(player.Character and player.Character:GetChildren() or {})
    do
        if string.find(obj.Name, itemName) then
            count += getCount(obj)
        end
    end
    return count
end

local function buySeed(itemName, target)
    if not BuySeed then
        return
    end
    local current = countInBackpack(itemName)
    if type(target) == 'number' and current >= target then
        print(('‚úÖ Seed %s ƒë·ªß (%d/%d)'):format(itemName, current, target))
        return
    end
    BuySeed:FireServer('Tier 1', itemName)
    print(
        ('üå± Mua Seed %s | Hi·ªán c√≥ %d/%s'):format(
            itemName,
            current,
            target or '‚àû'
        )
    )
end

local function buyGear(itemName, target)
    if not BuyGear then
        return
    end
    local current = countInBackpack(itemName)
    if type(target) == 'number' and current >= target then
        print(('‚úÖ Gear %s ƒë·ªß (%d/%d)'):format(itemName, current, target))
        return
    end
    BuyGear:FireServer(itemName)
    print(
        ('üõ†Ô∏è Mua Gear %s | Hi·ªán c√≥ %d/%s'):format(
            itemName,
            current,
            target or '‚àû'
        )
    )
end

local function buyEgg(itemName, target)
    if not BuyEgg then
        return
    end
    local current = countInBackpack(itemName)
    if type(target) == 'number' and current >= target then
        print(('‚úÖ Egg %s ƒë·ªß (%d/%d)'):format(itemName, current, target))
        return
    end
    BuyEgg:FireServer(itemName)
    print(
        ('ü•ö Mua Egg %s | Hi·ªán c√≥ %d/%s'):format(
            itemName,
            current,
            target or '‚àû'
        )
    )
end

local function buyEventItem(itemName, target, shopIndex)
    if not BuyEventShop then
        return
    end
    local current = countInBackpack(itemName)
    if type(target) == 'number' and current >= target then
        print(('‚úÖ Event %s ƒë·ªß (%d/%d)'):format(itemName, current, target))
        return
    end
    BuyEventShop:FireServer(itemName, shopIndex)
    print(
        ('üçÅ Mua Event %s | Hi·ªán c√≥ %d/%s'):format(
            itemName,
            current,
            target or '‚àû'
        )
    )
end

function DoAutoBuy()
    local cfg = getgenv().Config.AutoBuy or {}
    for key, val in pairs(cfg.Seeds or {}) do
        if type(key) == 'string' then
            buySeed(key, val)
        elseif type(val) == 'string' then
            buySeed(val, nil)
        end
    end
    for key, val in pairs(cfg.Gears or {}) do
        if type(key) == 'string' then
            buyGear(key, val)
        elseif type(val) == 'string' then
            buyGear(val, nil)
        end
    end
    for key, val in pairs(cfg.Eggs or {}) do
        if type(key) == 'string' then
            buyEgg(key, val)
        elseif type(val) == 'string' then
            buyEgg(val, nil)
        end
    end
    for name, target in pairs(cfg.EventShop or {}) do
        local shopIndex = ShopIndexMap[name]
        if shopIndex then
            buyEventItem(name, target, shopIndex)
        end
    end
end

-- ===============================
-- ü™ì BREAK PLANTS (from ph√° c√¢y) - single pass
-- ===============================
local function countAllPlants(myFarm)
    if not myFarm then
        return 0
    end
    local folder = myFarm.Important:FindFirstChild('Plants_Physical')
    if not folder then
        return 0
    end
    return #folder:GetChildren()
end

local function breakPlants(myFarm, breakList)
    if not RemoveItemRE then
        return
    end
    local folder = myFarm.Important:FindFirstChild('Plants_Physical')
    if not folder then
        return
    end
    equipOnly('Shovel')
    for _, plant in ipairs(folder:GetChildren()) do
        for _, name in ipairs(breakList or {}) do
            if plant.Name == name then
                for _, slot in ipairs(plant:GetChildren()) do
                    RemoveItemRE:FireServer(slot)
                    print('‚ùå ƒê√£ ph√° c√¢y:', plant.Name, 'ID:', slot.Name)
                    task.wait(0.15)
                end
            end
        end
    end
end

function DoBreakPlants()
    local myFarm = getMyFarm()
    if not myFarm then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y farm c·ªßa b·∫°n!')
        return
    end
    local total = countAllPlants(myFarm)
    print('üìä T·ªïng s·ªë c√¢y trong farm:', total)
    if total > (getgenv().Config.MaxPlants or 300) then
        print(
            '‚ö†Ô∏è V∆∞·ª£t qu√° gi·ªõi h·∫°n, ph√°:',
            table.concat(getgenv().Config.BreakList or {}, ', ')
        )
        breakPlants(myFarm, getgenv().Config.BreakList)
    else
        print('‚úÖ S·ªë c√¢y h·ª£p l·ªá, kh√¥ng c·∫ßn ph√°.')
    end
end

-- ===============================
-- üöÄ MAIN LOOP (tu·∫ßn t·ª±: c√°i n√†y xong m·ªõi ƒë·∫øn c√°i kia)
-- ===============================
task.spawn(function()
    while getgenv().RunningFarm and task.wait(getgenv().Config.LoopInterval) do
        print('===== üîÑ B·∫Øt ƒë·∫ßu v√≤ng farm m·ªõi =====')
        pcall(DoEggs)
        pcall(DoPlanting)
        pcall(DoSprinklers)
        pcall(DoSellPets)
        pcall(DoFeedPets)
        pcall(DoEquipPets)
        pcall(DoAutoBuy)
        pcall(DoHarvest)
        pcall(DoSellFruits)
        pcall(DoBreakPlants)
        print('===== ‚úÖ K·∫øt th√∫c v√≤ng farm =====')
    end
end)
-- ===============================
-- üõí AUTO BUY EVENT SHOP (g·ªëc, c·ªë ƒë·ªãnh Evo Seeds)
-- ===============================
local RS = game:GetService('ReplicatedStorage')
local BuyEventShop = RS.GameEvents:FindFirstChild('BuyEventShopStock')

local function DoBuyShopEvent()
    if not BuyEventShop then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y remote BuyEventShopStock')
        return
    end

    -- danh s√°ch c·ªë ƒë·ªãnh
    BuyEventShop:FireServer('Evo Beetroot I', 5)
    BuyEventShop:FireServer('Evo Blueberry I', 5)
    BuyEventShop:FireServer('Evo Pumpkin I', 5)
    BuyEventShop:FireServer('Evo Mushroom I', 5)

    print('‚úÖ ƒê√£ g·ª≠i request mua t·∫•t c·∫£ Evo Seeds')
end

-- üîÑ Auto loop m·ªói 60 gi√¢y
task.spawn(function()
    while task.wait(60) do
        DoBuyShopEvent()
    end
end)

-- ===============================
-- üåü FIXED SETTINGS (kh√¥ng c·∫ßn config)
-- ===============================
local Players = game:GetService('Players')
local Rep = game:GetService('ReplicatedStorage')
local ColServ = game:GetService('CollectionService')
local localPlayer = Players.LocalPlayer
local CollectRemote = Rep.GameEvents.Crops.Collect
local SubmitRemote = Rep.GameEvents.TieredPlants.Submit

local INTERVAL = 10 -- gi√£n c√°ch check thu ho·∫°ch (gi√¢y)
local FIRE_DELAY = 0.25 -- delay gi·ªØa m·ªói l·∫ßn FireServer
local LIMIT = 200 -- s·ªë crop t·ªëi ƒëa m·ªói v√≤ng
local DEBUG = true -- in log

-- ===============================
-- üîé T√¨m farm
-- ===============================
local function getMyFarm()
    for _, farm in ipairs(workspace:GetChildren()) do
        if farm.Name == 'Farm' then
            for _, subFarm in ipairs(farm:GetChildren()) do
                if
                    subFarm.Name == 'Farm'
                    and subFarm:FindFirstChild('Important')
                    and subFarm.Important:FindFirstChild('Data')
                    and subFarm.Important.Data:FindFirstChild('Owner')
                    and subFarm.Important.Data.Owner.Value
                        == localPlayer.Name
                then
                    return subFarm
                end
            end
        end
    end
    return nil
end

-- üîç Check tag collect
local function hasCollectTag(obj)
    if type(obj.HasTag) == 'function' then
        local ok, res = pcall(function()
            return obj:HasTag('CollectPrompt')
        end)
        if ok then
            return res
        end
    end
    return ColServ:HasTag(obj, 'CollectPrompt')
end

-- üìú Danh s√°ch tr√°i Evo h·ª£p l·ªá
local evoFruits = {
    'Evo Beetroot I',
    'Evo Blueberry I',
    'Evo Pumpkin I',
    'Evo Mushroom I',
    'Evo Beetroot II',
    'Evo Blueberry II',
    'Evo Pumpkin II',
    'Evo Mushroom II',
    'Evo Beetroot III',
    'Evo Blueberry III',
    'Evo Pumpkin III',
    'Evo Mushroom III',
}

local function isEvoFruit(name)
    for _, fname in ipairs(evoFruits) do
        if string.find(name, fname) then
            return true
        end
    end
    return false
end

-- üåª Thu ho·∫°ch c√¢y Evo
local function harvestEvo(limit)
    local collected = 0
    local myFarm = getMyFarm()
    if not myFarm then
        warn('‚ùå Kh√¥ng t√¨m th·∫•y farm c·ªßa b·∫°n!')
        return
    end

    for _, inst in ipairs(myFarm:GetDescendants()) do
        if inst:IsA('ProximityPrompt') and hasCollectTag(inst) then
            local crop = inst.Parent and inst.Parent.Parent
            if crop and isEvoFruit(crop.Name) then
                CollectRemote:FireServer({ crop })
                if DEBUG then
                    print('‚úÖ Thu ho·∫°ch:', crop.Name)
                end
                collected += 1
                task.wait(FIRE_DELAY)
                if collected >= limit then
                    return
                end
            else
                if DEBUG and crop then
                    print('‚è≠Ô∏è B·ªè qua:', crop.Name)
                end
            end
        end
    end
end

-- üß∞ Equip ƒë√∫ng fruit c√≥ b=j
local function equipCorrectFruit()
    -- ƒëang c·∫ßm
    for _, tool in ipairs(localPlayer.Character:GetChildren()) do
        if tool:IsA('Tool') and isEvoFruit(tool.Name) then
            local attrs = tool:GetAttributes()
            if attrs and attrs.b == 'j' then
                return tool
            end
        end
    end
    -- trong backpack
    for _, tool in ipairs(localPlayer.Backpack:GetChildren()) do
        if tool:IsA('Tool') and isEvoFruit(tool.Name) then
            local attrs = tool:GetAttributes()
            if attrs and attrs.b == 'j' then
                tool.Parent = localPlayer.Character
                if DEBUG then
                    print('üì¶ Auto c·∫ßm:', tool.Name)
                end
                return tool
            end
        end
    end
    return nil
end

-- üßæ N·ªôp fruit
local function submitFruit(tool)
    if tool and tool:IsA('Tool') then
        SubmitRemote:FireServer('Held')
        if DEBUG then
            print('‚úÖ ƒê√£ n·ªôp:', tool.Name)
        end
    end
end

-- ===============================
-- üöÄ Main loops
-- ===============================
task.spawn(function()
    while task.wait(INTERVAL) do
        harvestEvo(LIMIT)
    end
end)

task.spawn(function()
    while task.wait(1) do
        local fruit = equipCorrectFruit()
        if fruit then
            task.wait(0.5)
            submitFruit(fruit)
        end
    end
end)
local player = game.Players.LocalPlayer

-- üìú Danh s√°ch c√¢y/qu·∫£ Evo c·∫ßn gi·ªØ nguy√™n
local KeepEvo = {
    ['Evo Beetroot I'] = true,
    ['Evo Blueberry I'] = true,
    ['Evo Pumpkin I'] = true,
    ['Evo Mushroom I'] = true,
    ['Evo Beetroot II'] = true,
    ['Evo Blueberry II'] = true,
    ['Evo Pumpkin II'] = true,
    ['Evo Mushroom II'] = true,
    ['Evo Beetroot III'] = true,
    ['Evo Blueberry III'] = true,
    ['Evo Pumpkin III'] = true,
    ['Evo Mushroom III'] = true,
}

-- üîß H√†m xo√° visual an to√†n, gi·ªØ l·∫°i PrimaryPart v√† c√¢y Evo
local function clearPlantAndFruits(plant)
    if KeepEvo[plant.Name] then
        -- ‚úÖ N·∫øu l√† c√¢y Evo ‚Üí gi·ªØ nguy√™n c·∫£ model + qu·∫£
        return
    end

    for _, obj in ipairs(plant:GetChildren()) do
        if tonumber(obj.Name) and obj.Name ~= 'PrimaryPart' then
            warn('X√≥a part c√¢y:', obj:GetFullName())
            obj:Destroy()
        end
        if obj.Name == 'Fruits' then
            for _, fruit in ipairs(obj:GetChildren()) do
                if KeepEvo[fruit.Name] then
                    -- ‚úÖ N·∫øu l√† qu·∫£ Evo ‚Üí gi·ªØ nguy√™n
                    continue
                end
                for _, fchild in ipairs(fruit:GetChildren()) do
                    if
                        tonumber(fchild.Name)
                        and fchild.Name ~= 'PrimaryPart'
                    then
                        warn('X√≥a part qu·∫£:', fchild:GetFullName())
                        fchild:Destroy()
                    end
                end
            end
        end
    end
end

-- üöÄ V√≤ng l·∫∑p ch√≠nh
spawn(function()
    while task.wait(2) do
        pcall(function()
            -- ‚ùå Xo√° to√†n b·ªô con trong Lighting
            for _, obj in ipairs(game:GetService('Lighting'):GetChildren()) do
                warn('X√≥a Lighting object:', obj.Name)
                obj:Destroy()
            end

            -- ‚ùå Xo√° to√†n b·ªô con trong workspace.Debris
            if workspace:FindFirstChild('Debris') then
                for _, obj in ipairs(workspace.Debris:GetChildren()) do
                    warn('X√≥a Debris object:', obj.Name)
                    obj:Destroy()
                end
            end

            -- ‚ùå Xo√° to√†n b·ªô con trong workspace.Terrain
            if workspace:FindFirstChild('Terrain') then
                for _, obj in ipairs(workspace.Terrain:GetChildren()) do
                    warn('X√≥a Terrain object:', obj.Name)
                    obj:Destroy()
                end
            end

            -- üîÑ Clear Farms
            for _, farm in workspace:GetChildren() do
                if farm.Name == 'Farm' then
                    for _, subFarm in ipairs(farm:GetChildren()) do
                        if
                            subFarm.Name == 'Farm'
                            and subFarm:FindFirstChild('Important')
                            and subFarm.Important:FindFirstChild('Data')
                            and subFarm.Important.Data:FindFirstChild('Owner')
                        then
                            local isMine = (
                                subFarm.Important.Data.Owner.Value
                                == player.Name
                            )

                            -- ‚ùå Xo√° farm ng∆∞·ªùi kh√°c
                            if not isMine then
                                warn('X√≥a farm kh√°c:', subFarm.Name)
                                subFarm:Destroy()
                            end

                            -- ‚úÖ Farm c·ªßa m√¨nh
                            if isMine then
                                if
                                    subFarm.Important:FindFirstChild(
                                        'Plants_Physical'
                                    )
                                then
                                    for _, plant in
                                        ipairs(
                                            subFarm.Important.Plants_Physical:GetChildren()
                                        )
                                    do
                                        clearPlantAndFruits(plant)
                                    end
                                end

                                if
                                    subFarm.Important:FindFirstChild(
                                        'Decorations'
                                    )
                                then
                                    for _, obj in
                                        ipairs(
                                            subFarm.Important.Decorations:GetChildren()
                                        )
                                    do
                                        warn('X√≥a deco:', obj.Name)
                                        obj:Destroy()
                                    end
                                end

                                if
                                    subFarm.Important:FindFirstChild('Fences')
                                then
                                    for _, obj in
                                        ipairs(
                                            subFarm.Important.Fences:GetChildren()
                                        )
                                    do
                                        warn('X√≥a fence:', obj.Name)
                                        obj:Destroy()
                                    end
                                end

                                if
                                    subFarm.Important:FindFirstChild(
                                        'Cosmetics'
                                    )
                                then
                                    for _, obj in
                                        ipairs(
                                            subFarm.Important.Cosmetics:GetChildren()
                                        )
                                    do
                                        warn('X√≥a cosmetic:', obj.Name)
                                        obj:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
end)

	Collect_Cooldown = 90, -- cooldown to collect fruit

	["Low Cpu"] = true,
	["Auto Rejoin"] = false,

	["Rejoin When Update"] = true,

	["Auto Trade Pet"] = { -- beta idk it work or no
		["Enabled"] = false, 
		["Target"] =  { -- multi users
			"username1",
			"username2",
		},
		["Pet To Send"] = {
			
		}
	},

	Ascend = {
		Enabled = false,
		Max_Rebirth_Money = 1_000_000_000_000,
		Shop = {
			"Egg Capacity"
		}
	},

	["Limit Tree"] = {
		["Limit"] = 250,
		["Destroy Until"] = 200,

		["Safe Tree"] = {
			"Moon Blossom",
			"Bone Blossom",
			"Moon Melon",
			"Maple Apple",
			"Moon Mango",
			"Dragon Pepper",
			"Elephant Ears",
			"Fossilight",
			"Princess Thorn",
			-- for the event
			Bamboo = 4,
			Coconut = 15,
			Mushroom = 4,
			Glowthorn = 4,
			Tomato = 15,
			Pumpkin = 4,
			Pepper = 4,
			Cacao = 15,
			Apple = 15,
			Romanesco = 4,
			["Elder Strawberry"] = 4,
			["Burning Bud"] = 4,
			["Giant Pinecone"] = 4,
			Corn = 4,
			["Sugar Apple"] = 4,
			["Ember Lily"] = 4,
			["Dragon Fruit"] = 15,
			Sunbulb = 8,
			["Orange Tulip"] = 4,
			Blueberry = 15,
			Watermelon = 4,
			Mango = 15,
			Cactus = 4,
			Strawberry = 15,
			Beanstalk = 4,
			Lightshoot = 4,
			Grape = 4,
			Daffodil = 4,
		}
	},

	Seed = {
		Buy = {
			Mode = "Auto", -- Custom , Auto
			Custom = { -- any seed u need to buy
				"Carrot",
			}
		},
		Place = {
			Mode = "Lock", -- Select , Lock
			Select = {
				"Carrot"
			},
			Lock = {
				"Maple Apple",
				"Sunflower",
				"Dragon Pepper",
				"Elephant Ears",
				"Moon Melon",
				"Easter Egg",
				"Moon Mango",
				"Bone Blossom",
				"Fossilight",
			}
		}
	},

	["Seed Pack"] = {
		Locked = {
			["Enchanted Seed Pack"] = 10,
		}
	},

	Events = {
		-- MaxMoney_Restocks = 10_000_000,
		
		Shop = { -- un comment to buy
			"Evo Beetroot I",
			"Evo Blueberry I",
			"Evo Pumpkin I",
			"Evo Mushroom I",
		},
		["Traveling Shop"] = {
			"Bee Egg",
			"Paradise Egg", 
			"Rare Summer Egg", 
			"Common Summer Egg"
		},
		Craft = {
			"Anti Bee Egg",
			"Enchanted Chest",
			"Enchanted Egg",
			"Pet Shard GiantBean",
			"Sprout Egg",
		},
		Start_Do_Honey = 2_000_000 -- start trade fruit for honey at money
	},

	Gear = {
		Buy = { 
			"Master Sprinkler",
			"Godly Sprinkler",
			"Advanced Sprinkler",
			"Basic Sprinkler",
			"Lightning Rod",
			"Level Up Lollipop",
			"Medium Treat",
			"Medium Toy",
			"Harvest Tool",
		},
		Lock = {
			"Master Sprinkler",
			"Godly Sprinkler",
			"Advanced Sprinkler",
			"Basic Sprinkler",
			"Lightning Rod",
		},
	},

	Eggs = {
		Place = {
			"Jungle Egg",
			"Anti Bee Egg",
			"Bug Egg",
			"Fall Egg",
			"Enchanted Egg",
			"Sprout Egg",
			"Gourmet Egg",
			"Zen Egg",
			"Primal Egg",
			"Dinosaur Egg",
			"Oasis Egg",
			"Night Egg",
			"Paradise Egg",
			"Bee Egg",
			"Rare Egg",
		},
		Buy = {
			"Jungle Egg",
			"Bee Egg",
			"Rare Egg",
			"Oasis Egg",
			"Paradise Egg",
			"Anti Bee Egg",
			"Night Egg",
			"Rare Summer Egg",
			"Bug Egg",
			"Mythical Egg",
			"Uncommon Egg",
			"Common Egg",
		}
	},

	Pets = {
		["Auto Feed"] = true,

		MutationPet = {
			["PET NAME"] = { "Glimmering","... any other" }
		},

		["Start Delete Pet At"] = 50,
		["Upgrade Slot"] = {
			["Pet"] = {
				["Starfish"] = { 1, 100, 7 , true }, -- the "true" on the last is auto equip (use for like only need to use for upgrade pet)
			},
			["Limit Upgrade"] = 5, -- max is 5 (more than or lower than 1 will do nothing)
			["Equip When Done"] = {
				["Tarantula Hawk"] = { 1, 100, 1 },
				["Sunny-Side Chicken"] = { 4, 100, 2 }, 
				["Hotdog Daschund"] = { 4, 100, 3 },
				["Blood Kiwi"] = { 8, 100, 4 },
				["Rooster"] = { 8, 100, 5 },
				["Starfish"] = { 1, 100, 6 },
			},
		},
		Unfavorite_AllPet = false,
		Favorite_LockedPet = false,
		Locked_Pet_Age = 60, -- pet that age > 60 will lock
		Locked = {
			"Tiger",
			"Swan",
			"Red Panda",
			"Space Squirrel",
			"Barn Owl",
			"Phoenix",
			["Shroomie"] = 2,
			["Drake"] = 2,
			["Luminous Sprite"] = 2,
			"Griffin",
			["Glimmering Sprite"] = 5,
			"Cockatrice",
			"Golem",
			"Gnome",
			"Green Bean", 
			"Apple Gazelle", 
			"Lemon Lion", 
			"Peach Wasp",
			"Golden Goose",
			["Spriggan"] = 5,
			["Gorilla Chef"] = 4,
			"Junkbot",
			"Hotdog Daschund",
			"Sunny-Side Chicken",
			"Lobster Thermidor",
			"French Fry Ferret",
			["Starfish"] = 8,
			"Raiju",
			"Corrupted Kodama",
			["Rooster"] = 4,
			"Capybara",
			["Koi"] = 2,
			["Tanchozuru"] = 3,
			["Moth"] = 3, 
			"Kitsune",
			"Corrupted Kitsune",
			"Dilophosaurus",
			"Spinosaurus",
			"Brontosaurus",
			"T-Rex",
			"Fennec Fox",
			"Blood Kiwi",
			["Hamster"] = 2,
			"Disco Bee",
			"Raccoon",
			"Queen Bee",
			"Dragonfly",
			"Butterfly",
			["Tarantula Hawk"] = 2,
			["Wasp"] = 2,
			["Honey Bee"] = 2,
			["Bee"] = 2,
			"Mimic Octopus",
			"Red Fox",
			"Chicken Zombie"
		},
		LockPet_Weight = 5, -- if Weight >= 10 they will locked
		Ignore_Pet_Weight = {
		},
		Instant_Sell = {
		}
	},
	Webhook = {
		UrlPet = "https://discord.com/api/webhooks/1246353354930651207/OIsCx9I2sXKRokSTvcAWbM121LUdAH13mOE8J5Erh8q-RQUzECGSS2Oixoi8x7Egl8Ky",
		UrlSeed = "xxx",
		PcName = "dew",

		Mention = "473755357274046464", -- discord id

		Noti = {
			Seeds = {
				"Sunflower",
				"Dragon Pepper",
				"Elephant Ears",
			},
			SeedPack = {
				"Idk"
			},
			Pets = {
				"Tiger",
				"Space Squirrel",
				"Swan",
				"Phoenix",
				"Golden Goose",
				"French Fry Ferret",
				"Cockatrice",
				"Kitsune",
				"Spinosaurus",
				"T-Rex",
				"Disco Bee",
				"Butterfly",
				"Mimic Octopus",
				"Queen Bee",
				"Fennec Fox",
				"Dragonfly",
				"Raccoon",
				"Red Fox",
			},
			Pet_Weight_Noti = true,
		}
	},
}
License = "8xGBxxJlHuPLdS1c2sW50enfE4WzHG6W"

loadstring(game:HttpGet('https://raw.githubusercontent.com/Real-Aya/Loader/main/Init.lua'))()
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Workspace = game:GetService('Workspace')

local localPlayer = Players.LocalPlayer

-- Ch·ªù nh√¢n v·∫≠t load
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild('HumanoidRootPart')

-- üìç T·ªça ƒë·ªô c·∫ßn teleport
local targetPos =
    Vector3.new(30.605241775512695, 2.999999761581421, -102.87364959716797)

-- L·∫•y module CosmeticService
local CosmeticService =
    require(ReplicatedStorage.Modules.CosmeticServices.CosmeticService)

-- H√†m ki·ªÉm tra v√† equip Pancake Stack
local function equipPancakeStack()
    local allOwned = CosmeticService:GetAllCosmetics() or {}
    local allEquipped = CosmeticService:GetAllEquippedCosmetics() or {}

    for id, data in pairs(allOwned) do
        if data.Name == 'Pancake Stack' then
            if allEquipped[id] then
                print('‚úÖ Pancake Stack ƒë√£ equip')
                return true
            else
                local success = CosmeticService:Equip(id)
                if success then
                    print('üéâ Pancake Stack ƒë√£ ƒë∆∞·ª£c equip!')
                    return true
                else
                    print(
                        '‚ùå Kh√¥ng th·ªÉ equip Pancake Stack (server c√≥ th·ªÉ ch∆∞a unlock ho·∫∑c max equipped)'
                    )
                    return false
                end
            end
        end
    end

    print('‚ùå Kh√¥ng t√¨m th·∫•y Pancake Stack trong inventory')
    return false
end

-- H√†m check trong v∆∞·ªùn xem ƒë√£ c√≥ Pancake Stack ch∆∞a
local function hasPancakeInFarm()
    local farmPath = Workspace:FindFirstChild('Farm')
    if not farmPath then
        return false
    end

    local important = farmPath:FindFirstChild('Farm')
        and farmPath.Farm:FindFirstChild('Important')
    if not important then
        return false
    end

    local cosmetic = important:FindFirstChild('Cosmetic_Physical')
    if not cosmetic then
        return false
    end

    local part = cosmetic:FindFirstChild('Part')
    if not part then
        return false
    end

    local pancake = part:FindFirstChild('Pancake Stack')
    if pancake and #pancake:GetChildren() > 0 then
        -- C√≥ fodel/model con trong Pancake Stack
        return true
    end

    return false
end

-- üîÑ V√≤ng l·∫∑p ch√≠nh
task.spawn(function()
    while true do
        if not hasPancakeInFarm() then
            -- Ch∆∞a c√≥ trong farm => th·ª±c hi·ªán teleport + equip
            hrp.CFrame = CFrame.new(targetPos)
            print('‚úÖ ƒê√£ teleport ƒë·∫øn v·ªã tr√≠:', targetPos)

            task.wait(0.5) -- ƒê·ª£i teleport ·ªïn ƒë·ªãnh

            local equipped = equipPancakeStack()
            if equipped then
                task.wait(10) -- ngh·ªâ l√¢u h∆°n n·∫øu th√†nh c√¥ng
            else
                task.wait(2) -- retry nhanh h∆°n n·∫øu fail
            end
        else
            -- ƒê√£ c√≥ Pancake Stack trong farm => b·ªè qua
            print(
                '‚ö†Ô∏è Pancake Stack ƒë√£ c√≥ trong farm, b·ªè qua v√≤ng n√†y'
            )
            task.wait(5)
        end
    end
end)
